
lightsensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  0000016e  2**0
                  ALLOC
  2 .stab         00000c24  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000009a7  00000000  00000000  00000d94  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000173b  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	31 c0       	rjmp	.+98     	; 0x7c <__vector_12>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a1 36       	cpi	r26, 0x61	; 97
  36:	b1 07       	cpc	r27, r17
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	4d d0       	rcall	.+154    	; 0xd6 <main>
  3c:	5c c0       	rjmp	.+184    	; 0xf6 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <initWatchdog>:
  }
}

void initWatchdog()
{
	wdt_reset();
  40:	a8 95       	wdr
	WDTCR |= (1<<WDCE)|(1<<WDE);	// Enable watchdog
  42:	81 b5       	in	r24, 0x21	; 33
  44:	88 61       	ori	r24, 0x18	; 24
  46:	81 bd       	out	0x21, r24	; 33
//	WDTCR |= (1<<WDP3)|(1<<WDP0);   // Prescaler 1024 or 8s
//	WDTCR |= (1<<WDP3);   			// Prescaler 512 or 4s
	WDTCR |= (1<<WDP2)|(1<<WDP1)|(1<<WDP0);   // Prescaler 256 or 2s
  48:	81 b5       	in	r24, 0x21	; 33
  4a:	87 60       	ori	r24, 0x07	; 7
  4c:	81 bd       	out	0x21, r24	; 33
	WDTCR |= (1<<WDIE);				// Enable interrupt
  4e:	81 b5       	in	r24, 0x21	; 33
  50:	80 64       	ori	r24, 0x40	; 64
  52:	81 bd       	out	0x21, r24	; 33
	sei();							// Enable all interrupts
  54:	78 94       	sei
  56:	08 95       	ret

00000058 <system_sleep>:
}	
void system_sleep() 
{
	set_sleep_mode(SLEEP_MODE_PWR_DOWN); // sleep mode is set here
  58:	85 b7       	in	r24, 0x35	; 53
  5a:	87 7e       	andi	r24, 0xE7	; 231
  5c:	80 61       	ori	r24, 0x10	; 16
  5e:	85 bf       	out	0x35, r24	; 53
	sleep_enable();
  60:	85 b7       	in	r24, 0x35	; 53
  62:	80 62       	ori	r24, 0x20	; 32
  64:	85 bf       	out	0x35, r24	; 53
	sleep_mode();                        // System sleeps 
  66:	85 b7       	in	r24, 0x35	; 53
  68:	80 62       	ori	r24, 0x20	; 32
  6a:	85 bf       	out	0x35, r24	; 53
  6c:	88 95       	sleep
  6e:	85 b7       	in	r24, 0x35	; 53
  70:	8f 7d       	andi	r24, 0xDF	; 223
  72:	85 bf       	out	0x35, r24	; 53
	sleep_disable();                     // System continues execution here when watchdog times out 
  74:	85 b7       	in	r24, 0x35	; 53
  76:	8f 7d       	andi	r24, 0xDF	; 223
  78:	85 bf       	out	0x35, r24	; 53
  7a:	08 95       	ret

0000007c <__vector_12>:
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	0f 90       	pop	r0
  88:	0f be       	out	0x3f, r0	; 63
  8a:	0f 90       	pop	r0
  8c:	1f 90       	pop	r1
  8e:	18 95       	reti

00000090 <initADC>:
  90:	96 e8       	ldi	r25, 0x86	; 134
  92:	96 b9       	out	0x06, r25	; 6
  94:	82 30       	cpi	r24, 0x02	; 2
  96:	11 f4       	brne	.+4      	; 0x9c <initADC+0xc>
  98:	81 e2       	ldi	r24, 0x21	; 33
  9a:	07 c0       	rjmp	.+14     	; 0xaa <initADC+0x1a>
  9c:	83 30       	cpi	r24, 0x03	; 3
  9e:	11 f4       	brne	.+4      	; 0xa4 <initADC+0x14>
  a0:	83 e2       	ldi	r24, 0x23	; 35
  a2:	03 c0       	rjmp	.+6      	; 0xaa <initADC+0x1a>
  a4:	84 30       	cpi	r24, 0x04	; 4
  a6:	11 f4       	brne	.+4      	; 0xac <initADC+0x1c>
  a8:	82 e2       	ldi	r24, 0x22	; 34
  aa:	87 b9       	out	0x07, r24	; 7
  ac:	08 95       	ret

000000ae <readADC>:
  ae:	36 9a       	sbi	0x06, 6	; 6
  b0:	36 99       	sbic	0x06, 6	; 6
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <readADC+0x2>
  b4:	85 b1       	in	r24, 0x05	; 5
  b6:	08 95       	ret

000000b8 <delay_ms>:
  b8:	20 e0       	ldi	r18, 0x00	; 0
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	08 c0       	rjmp	.+16     	; 0xce <delay_ms+0x16>
  be:	ef ec       	ldi	r30, 0xCF	; 207
  c0:	f7 e0       	ldi	r31, 0x07	; 7
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <delay_ms+0xa>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <delay_ms+0x10>
  c8:	00 00       	nop
  ca:	2f 5f       	subi	r18, 0xFF	; 255
  cc:	3f 4f       	sbci	r19, 0xFF	; 255
  ce:	28 17       	cp	r18, r24
  d0:	39 07       	cpc	r19, r25
  d2:	a9 f7       	brne	.-22     	; 0xbe <delay_ms+0x6>
  d4:	08 95       	ret

000000d6 <main>:
void system_sleep();

int main( void ) 
{
//  s85dbgBegin(19200);
  initADC(PB2);
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	db df       	rcall	.-74     	; 0x90 <initADC>
  initWatchdog();
  da:	b2 df       	rcall	.-156    	; 0x40 <initWatchdog>
  portOut(RED)
  dc:	bb 9a       	sbi	0x17, 3	; 23

  while(1)
  {
	 system_sleep();				// System sleep for 8s 
  de:	bc df       	rcall	.-136    	; 0x58 <system_sleep>
     lightLevel = readADC();		// Read the light sensor
  e0:	e6 df       	rcall	.-52     	; 0xae <readADC>
  e2:	80 93 60 00 	sts	0x0060, r24

//   sprintf(debugmsg,"ADCH is %i \n",lightLevel); 
//	 s85dbgWriteStr(debugmsg);	

	 if(lightLevel > 245)
  e6:	86 3f       	cpi	r24, 0xF6	; 246
  e8:	d0 f3       	brcs	.-12     	; 0xde <main+0x8>
	  {
		 portHi(RED);
  ea:	c3 9a       	sbi	0x18, 3	; 24
		 delay_ms(450);
  ec:	82 ec       	ldi	r24, 0xC2	; 194
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	e3 df       	rcall	.-58     	; 0xb8 <delay_ms>
		 portLo(RED);
  f2:	c3 98       	cbi	0x18, 3	; 24
  f4:	f4 cf       	rjmp	.-24     	; 0xde <main+0x8>

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
